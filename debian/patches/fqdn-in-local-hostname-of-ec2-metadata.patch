Origin: upstream, https://github.com/openstack/nova/commit/6415999523d26f1680265e5ca438020b7d6542c6
Bug: https://bugs.launchpad.net/nova/+bug/854614
From 6415999523d26f1680265e5ca438020b7d6542c6 Mon Sep 17 00:00:00 2001
From: Scott Moser <smoser@ubuntu.com>
Date: Fri, 23 Sep 2011 16:44:44 -0400
Subject: [PATCH] put fully qualified domain name in local-hostname

make metadata service return fully qualified domain name (fqdn) in
the local-hostname field. (bug 854614)

Also, move the dhcp_domain flag from being in nova.network.linux_net to be
in the more common nova.network.manager.  Since it is being used for
something more generic, it shouldnt be stuck in linux_net.


Change-Id: Ieab3cb1b7b0b78aff8df25bbc35b96924a8e7e60
---
 nova/api/ec2/cloud.py       |    3 ++-
 nova/network/linux_net.py   |    3 ---
 nova/network/manager.py     |    3 +++
 nova/tests/test_metadata.py |    8 ++++++++
 4 files changed, 13 insertions(+), 4 deletions(-)

--- a/nova/api/ec2/cloud.py
+++ b/nova/api/ec2/cloud.py
@@ -52,6 +52,7 @@ from nova.image import s3
 
 
 FLAGS = flags.FLAGS
+flags.DECLARE('dhcp_domain', 'nova.network.manager')
 flags.DECLARE('service_down_time', 'nova.scheduler.driver')
 
 LOG = logging.getLogger("nova.api.cloud")
@@ -326,7 +327,7 @@ class CloudController(object):
         instance_ref = db.instance_get(ctxt, instance_ref[0]['id'])
 
         mpi = self._get_mpi_data(ctxt, instance_ref['project_id'])
-        hostname = instance_ref['hostname']
+        hostname = "%s.%s" % (instance_ref['hostname'], FLAGS.dhcp_domain)
         host = instance_ref['host']
         availability_zone = self._get_availability_zone_by_host(ctxt, host)
         floating_ip = db.instance_get_floating_address(ctxt,
--- a/nova/network/linux_net.py
+++ b/nova/network/linux_net.py
@@ -42,9 +42,6 @@ FLAGS = flags.FLAGS
 flags.DEFINE_string('dhcpbridge_flagfile',
                     '/etc/nova/nova-dhcpbridge.conf',
                     'location of flagfile for dhcpbridge')
-flags.DEFINE_string('dhcp_domain',
-                    'novalocal',
-                    'domain to use for building the hostnames')
 flags.DEFINE_string('networks_path', '$state_path/networks',
                     'Location to keep network config files')
 flags.DEFINE_string('public_interface', 'eth0',
--- a/nova/network/manager.py
+++ b/nova/network/manager.py
@@ -112,6 +112,9 @@ flags.DEFINE_bool('fake_call', False,
                   'If True, skip using the queue and make local calls')
 flags.DEFINE_bool('force_dhcp_release', False,
                   'If True, send a dhcp release on instance termination')
+flags.DEFINE_string('dhcp_domain',
+                    'novalocal',
+                    'domain to use for building the hostnames')
 
 
 class AddressAlreadyAllocated(exception.Error):
--- a/nova/tests/test_metadata.py
+++ b/nova/tests/test_metadata.py
@@ -24,12 +24,16 @@ import httplib
 import webob
 
 from nova import exception
+from nova import flags
 from nova import test
 from nova import wsgi
 from nova.api.ec2 import metadatarequesthandler
 from nova.db.sqlalchemy import api
 
 
+FLAGS = flags.FLAGS
+flags.DECLARE('dhcp_domain', 'nova.network.manager')
+
 USER_DATA_STRING = ("This is an encoded string")
 ENCODE_USER_DATA_STRING = base64.b64encode(USER_DATA_STRING)
 
@@ -119,3 +123,7 @@ class MetadataTestCase(test.TestCase):
         response = request.get_response(self.app)
         self.assertEqual(response.status_int, 200)
         self.assertEqual(response.body, USER_DATA_STRING)
+
+    def test_local_hostname_fqdn(self):
+        self.assertEqual(self.request('/meta-data/local-hostname'),
+            "%s.%s" % (self.instance['hostname'], FLAGS.dhcp_domain))
