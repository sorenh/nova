Description: Fix image access control
Author: Loganathan Parthipan <parthipan@hp.com>
Status: https://review.openstack.org/#change,761
diff -Naurp nova-2011.3.orig//Authors nova-2011.3//Authors
--- nova-2011.3.orig//Authors	2011-09-22 08:02:23.000000000 -0400
+++ nova-2011.3//Authors	2011-09-30 14:04:11.567409862 -0400
@@ -70,6 +70,7 @@ Kevin Bringard <kbringard@attinteractive
 Kevin L. Mitchell <kevin.mitchell@rackspace.com>
 Kirill Shileev <kshileev@gmail.com>
 Koji Iida <iida.koji@lab.ntt.co.jp>
+Loganathan Parthipan <parthipan@hp.com>
 Lorin Hochstein <lorin@isi.edu>
 Lvov Maxim <usrleon@gmail.com>
 Mandell Degerness <mdegerne@gmail.com>
diff -Naurp nova-2011.3.orig//nova/image/glance.py nova-2011.3//nova/image/glance.py
--- nova-2011.3.orig//nova/image/glance.py	2011-09-22 08:02:23.000000000 -0400
+++ nova-2011.3//nova/image/glance.py	2011-09-30 14:04:11.567409862 -0400
@@ -295,10 +295,28 @@ class GlanceImageService(service.BaseIma
         """Delete the given image.
 
         :raises: ImageNotFound if the image does not exist.
+        :raises: NotAuthorized if the user is not an owner.
 
         """
         # NOTE(vish): show is to check if image is available
-        self.show(context, image_id)
+        image_meta = self.show(context, image_id)
+
+        if FLAGS.use_deprecated_auth:
+            # NOTE(parthi): only allow image deletions if the user
+            # is a member of the project owning the image, in case of
+            # setup without keystone
+            # TODO Currently this access control breaks if
+            # 1. Image is not owned by a project
+            # 2. Deleting user is not bound a project
+            properties = image_meta['properties']
+            if (context.project_id and ('project_id' in properties)
+                and (context.project_id != properties['project_id'])):
+                raise exception.NotAuthorized(_("Not the image owner"))
+
+            if (context.project_id and ('owner_id' in properties)
+                and (context.project_id != properties['owner_id'])):
+                raise exception.NotAuthorized(_("Not the image owner"))
+
         try:
             result = self._get_client(context).delete_image(image_id)
         except glance_exception.NotFound:
